import"./chunk-R4NKYYJA.mjs";import svelteDoc from"sveltedoc-parser";import{dedent}from"ts-dedent";import*as path from"path";import*as fs from"fs";import{preprocess}from"svelte/compiler";import{logger}from"@storybook/node-logger";function getNameFromFilename(filename){if(!filename)return null;let parts=filename.split(/[/\\]/).map(encodeURI);if(parts.length>1){let index_match=parts[parts.length-1].match(/^index(\.\w+)/);index_match&&(parts.pop(),parts[parts.length-1]+=index_match[1])}let value=parts.pop();if(!value)throw new Error(`Could not derive component name from file ${filename}`);let base=value.replace(/%/g,"u").replace(/\.[^.]+$/,"").replace(/[^a-zA-Z_$0-9]+/g,"_").replace(/^_/,"").replace(/_$/,"").replace(/^(\d)/,"_$1");if(!base)throw new Error(`Could not derive component name from file ${filename}`);return base[0].toUpperCase()+base.slice(1)}async function svelteDocgen(source){let{resource}=this._module,svelteOptions=this.getOptions(),{preprocess:preprocessOptions,logDocgen=!1}=svelteOptions,docOptions;if(preprocessOptions){let src=fs.readFileSync(resource).toString(),{code:fileContent}=await preprocess(src,preprocessOptions);docOptions={fileContent}}else docOptions={filename:resource};let options={...docOptions,version:3},docgen="";try{let componentDoc=await svelteDoc.parse(options),file=path.basename(resource);componentDoc.name=path.basename(file);let componentName=getNameFromFilename(resource);docgen=dedent`
      ${componentName}.__docgen = ${JSON.stringify(componentDoc)};
    `}catch(error){logDocgen&&logger.error(error)}return source+docgen}export{svelteDocgen as default};
