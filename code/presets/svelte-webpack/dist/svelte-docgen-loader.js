"use strict";var __create=Object.create;var __defProp=Object.defineProperty;var __getOwnPropDesc=Object.getOwnPropertyDescriptor;var __getOwnPropNames=Object.getOwnPropertyNames;var __getProtoOf=Object.getPrototypeOf,__hasOwnProp=Object.prototype.hasOwnProperty;var __export=(target,all)=>{for(var name in all)__defProp(target,name,{get:all[name],enumerable:!0})},__copyProps=(to,from,except,desc)=>{if(from&&typeof from=="object"||typeof from=="function")for(let key of __getOwnPropNames(from))!__hasOwnProp.call(to,key)&&key!==except&&__defProp(to,key,{get:()=>from[key],enumerable:!(desc=__getOwnPropDesc(from,key))||desc.enumerable});return to};var __toESM=(mod,isNodeMode,target)=>(target=mod!=null?__create(__getProtoOf(mod)):{},__copyProps(isNodeMode||!mod||!mod.__esModule?__defProp(target,"default",{value:mod,enumerable:!0}):target,mod)),__toCommonJS=mod=>__copyProps(__defProp({},"__esModule",{value:!0}),mod);var svelte_docgen_loader_exports={};__export(svelte_docgen_loader_exports,{default:()=>svelteDocgen});module.exports=__toCommonJS(svelte_docgen_loader_exports);var import_sveltedoc_parser=__toESM(require("sveltedoc-parser")),import_ts_dedent=require("ts-dedent"),path=__toESM(require("path")),fs=__toESM(require("fs")),import_compiler=require("svelte/compiler"),import_node_logger=require("@storybook/node-logger");function getNameFromFilename(filename){if(!filename)return null;let parts=filename.split(/[/\\]/).map(encodeURI);if(parts.length>1){let index_match=parts[parts.length-1].match(/^index(\.\w+)/);index_match&&(parts.pop(),parts[parts.length-1]+=index_match[1])}let value=parts.pop();if(!value)throw new Error(`Could not derive component name from file ${filename}`);let base=value.replace(/%/g,"u").replace(/\.[^.]+$/,"").replace(/[^a-zA-Z_$0-9]+/g,"_").replace(/^_/,"").replace(/_$/,"").replace(/^(\d)/,"_$1");if(!base)throw new Error(`Could not derive component name from file ${filename}`);return base[0].toUpperCase()+base.slice(1)}async function svelteDocgen(source){let{resource}=this._module,svelteOptions=this.getOptions(),{preprocess:preprocessOptions,logDocgen=!1}=svelteOptions,docOptions;if(preprocessOptions){let src=fs.readFileSync(resource).toString(),{code:fileContent}=await(0,import_compiler.preprocess)(src,preprocessOptions);docOptions={fileContent}}else docOptions={filename:resource};let options={...docOptions,version:3},docgen="";try{let componentDoc=await import_sveltedoc_parser.default.parse(options),file=path.basename(resource);componentDoc.name=path.basename(file);let componentName=getNameFromFilename(resource);docgen=import_ts_dedent.dedent`
      ${componentName}.__docgen = ${JSON.stringify(componentDoc)};
    `}catch(error){logDocgen&&import_node_logger.logger.error(error)}return source+docgen}0&&(module.exports={});
